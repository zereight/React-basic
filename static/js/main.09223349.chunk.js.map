{"version":3,"sources":["movie.js","App.js","serviceWorker.js","index.js"],"names":["Moive","react_default","a","createElement","className","movie_MoviePoster","poster","this","props","title","genres","map","genre","idx","key","synopsis","Component","MoviePoster","alt","src","App","state","_renderMovies","_this","movies","movie","console","log","src_movie_0","id","title_english","medium_cover_image","_getMoives","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","_callee2","movieItems","_context2","fetch","json","data","abrupt","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAKMA,gMAEE,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACE,EAAD,CAAaC,OAAQC,KAAKC,MAAMF,UAGpCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,UAAKI,KAAKC,MAAMC,OAChBR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACVG,KAAKC,MAAME,OAAOC,IAAK,SAACC,EAAMC,GAAP,OACpBZ,EAAAC,EAAAC,cAAA,QAAMW,IAAKD,GAAMD,EAAjB,QAGRX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACVG,KAAKC,MAAMO,mBAhBhBC,cA0BdC,mLAGE,OACIhB,EAAAC,EAAAC,cAAA,OAAKe,IAAKX,KAAKC,MAAMC,MAAQL,UAAU,eAAee,IAAKZ,KAAKC,MAAMF,gBAJxDU,aAYXhB,ICaAoB,6MA/CbC,MAAQ,KAaTC,cAAgB,WACf,OAAOC,EAAKF,MAAMG,OAAOb,IAAK,SAAAc,GAE5B,OADAC,QAAQC,IAAIF,GACJxB,EAAAC,EAAAC,cAACyB,EAAD,CAAOd,IAAKW,EAAMI,GAAIpB,MAAOgB,EAAMK,cAAexB,OAAQmB,EAAMM,mBAAoBrB,OAAQe,EAAMf,OAAQK,SAAUU,EAAMV,gBAIrIiB,gCAAa,SAAAC,IAAA,IAAAT,EAAA,OAAAU,EAAAhC,EAAAiC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACSf,EAAKgB,WADd,OACNf,EADMY,EAAAI,KAGZjB,EAAKkB,SACH,CACEjB,WALQ,wBAAAY,EAAAM,SAAAT,QAUdM,8BAAW,SAAAI,IAAA,IAAAC,EAAA,OAAAV,EAAAhC,EAAAiC,KAAA,SAAAU,GAAA,cAAAA,EAAAR,KAAAQ,EAAAP,MAAA,cAAAO,EAAAP,KAAA,EACcQ,MAAK,iEADnB,cACLF,EADKC,EAAAL,KAAAK,EAAAP,KAAA,EAEUM,EAAWG,OAFrB,cAETH,EAFSC,EAAAL,KAAAK,EAAAP,KAAA,EAGUM,EAAWI,KAAKxB,OAH1B,cAGToB,EAHSC,EAAAL,KAAAK,EAAAI,OAAA,SAIFL,GAJE,yBAAAC,EAAAH,SAAAC,uIApBPpC,KAAKyB,8CA4BL,OACE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAYG,KAAKc,MAAMG,OAAS,MAAQ,gBAExCjB,KAAKc,MAAMG,OAASjB,KAAKe,gBAAkB,kBA3CpCN,aCKEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.09223349.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport \"./movie.css\";\n\n\n\nclass Moive extends Component {\n    render(){\n        return (\n            <div className=\"Movie\">\n                <div className=\"Movie_Columns\">\n                    <MoviePoster poster={this.props.poster}/>\n                </div>\n\n                <div className=\"Movie_Columns\">\n                    <h2>{this.props.title}</h2>\n                    <div className=\"Movie_Genres\">\n                        {this.props.genres.map( (genre,idx) => \n                            <span key={idx}>{genre} </span>\n                         )}\n                    </div>\n                    <div className=\"Movie_synopsis\">\n                        {this.props.synopsis}\n                    </div>\n                </div>\n                \n                \n            </div>\n        );\n    }\n}  \n\nclass MoviePoster extends Component{\n    render(){\n        //console.log(this.props.title);\n        return(\n            <img alt={this.props.title}  className=\"Movie_Poster\" src={this.props.poster} />\n        );\n    }\n}\n\n\n\n\nexport default Moive;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from \"./movie\";\n\n\n\n\nclass App extends Component {\n\n  state = { \n    \n  }\n\n\n  componentWillMount(){\n\n  }\n\n  componentDidMount(){ \n    this._getMoives()\n  }\n\n _renderMovies = () =>  {\n  return this.state.movies.map( movie => {\n    console.log(movie);\n    return (<Movie key={movie.id} title={movie.title_english} poster={movie.medium_cover_image} genres={movie.genres} synopsis={movie.synopsis} />);\n  }) ;\n}\n\n _getMoives = async () => {\n  const movies = await this._callApi();\n  //console.log(movies);\n  this.setState(\n    {\n      movies\n    }\n  )\n}\n\n_callApi = async () => {\n  let movieItems = await fetch(`https://yts.am/api/v2/list_movies.json?sort_by=download_count`)// return promise\n  movieItems = await movieItems.json();\n  movieItems = await movieItems.data.movies;\n  return movieItems;\n}\n\n  render() {\n    return (\n      <div className={ this.state.movies ? \"App\" : \"App--loading\"}>\n\n          {this.state.movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}